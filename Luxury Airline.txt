//Luxury airlines handler
#include<stdio.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<conio.h>
#define max_capacity 5
#define max_customers 25
#define total_flights 5
#define min_speed 450
#define max_speed 550
typedef struct passengers_info
{
	char name[50];
	int age;
	char designated_flight;
}pas_info;
typedef struct flight_info_status
{
    char flight_code;
	char start_end_point[2][3];
	int passenger_count;
	int availibility;
	int departure_time[2];
	int arrival_time[2];
	double distance_travelled;
	double flight_speed;
}flight_inst;
pas_info passengers[max_customers];
int passengers_index;
flight_inst flights[total_flights]=
{
	{'1',"GUW","BBS",0,1,{0,0},{0,0},887.0,500.0},
	{'2',"BBS","BAN",0,1,{0,0},{0,0},1163.0,500.0},
	{'3',"KER","BBS",0,1,{0,0},{0,0},1542.0,500.0},
	{'4',"BBS","DEL",0,1,{0,0},{0,0},1276.0,500.0},
	{'5',"JAK","BBS",0,1,{0,0},{0,0},1758.0,500.0}
};
int int_scanner()		//user-defined error-free scanner function for scanning integers(u2)
{
	int int_val;
	fflush(stdin);
	while(!scanf("%d",&int_val))
	{
		fflush(stdin);
		printf("invalid datatype provided. provide an integer: ");
	}
	return int_val;
}
double double_scanner()		//user-defined error-free scanner function for scanning doubles(u2)
{
	double double_val;
	fflush(stdin);
	while(!scanf("%lf",&double_val))
	{
		fflush(stdin);
		printf("invalid datatype provided. provide a real number/integer: ");
	}
	return double_val;
}
char *string_scanner()		//user-defined error-free scanner function for scanning strings(u2)
{
	static char str[50];
	fflush(stdin);
	while(!scanf("%[^\n]",str))
	{
		fflush(stdin);
		printf("invalid datatype provided. provide a string/character: ");
	}
	return str;
}
char character_scanner()		//user-defined error-free scanner function for scanning characters(u2)
{
	char ch;
	fflush(stdin);
	while(!scanf("%c",&ch))
	{
		fflush(stdin);
		printf("invalid datatype provided. provide a character: ");
	}
	return ch;
}
void invalid_input_handler()	  //auto	//invalid choice handling function
{
	int i;
	printf("\n\t\t\t\t\t\t\t\t\t\t   INVALID INPUT RECIEVED!\n\t\t\t\t\t\t\t\t\tThe choice provided by you does not match any from the list of choices.\n\t\t\t\t\t\t\t\t\tPlease exercise care in providing a choice now:\n\n");
	printf("\t\t\t\t\t\t\t\t\tEnter '1' to go back to where you were redirected from\n\t\t\t\t\t\t\t\t\t");
	printf("Enter '0' to exit the program\n\t\t\t\t\t\t\t\t\t");
	i=int_scanner();
	switch(i)
	{
	  case 1:return;
	  case 0:exit(0);
	  default :printf("It seems like you are no longer interested in using the program. Program has been terminated\npress any key to continue...");getche();exit(0);
	}
}

void system_date()
{
	const struct tm* ptr;
    time_t t;
    t = time(NULL);
    ptr = localtime(&t);
    char *arr=asctime(ptr);
	// printf("%s",arr);
}

void system_time_refactored(int* ref_hours,int* ref_minutes)
{
	const struct tm* ptr;
    time_t t;
    t = time(NULL);
    ptr = localtime(&t);
    char *arr=asctime(ptr);
    double min=(arr[14]-'0')*10 +(arr[15]-'0');
	double sec=(arr[17]-'0')*10 +(arr[18]-'0');
	double ref=0.4*min+sec*0.4*0.0167;
	*ref_hours=(int)ref;
	*ref_minutes= (int)((ref-(int)ref)*60.0);
}
void display_program_time()
{
	int program_hours,program_minutes;
	system_time_refactored(&program_hours,&program_minutes);
	printf("\t\t\t\t\t\t\t\tprogram time is:  %d:%d hrs\n\n",program_hours,program_minutes);
}
void time_of_flight(int flights_index)
{
    double speed=(double)(rand()%(max_speed-min_speed+1)+min_speed);
    double time=flights[flights_index].distance_travelled/(double)speed;
	int total_hours= (int)time,total_minutes= (int)((time-(int)time)*60.0);
	int ari_hours,ari_minutes;
	if((ari_hours=flights[flights_index].departure_time[0]+total_hours)>23){ari_hours-=24;}
	if((ari_minutes=flights[flights_index].departure_time[1]+total_minutes)>59){ari_minutes-=60; ari_hours++;}
	flights[flights_index].arrival_time[0]=ari_hours;
	flights[flights_index].arrival_time[1]=ari_minutes;
}
void update_initial_departure_arrival_time()
{
	int dep_hours,dep_minutes;
	system_time_refactored(&dep_hours,&dep_minutes);
	for(int flights_index=0;flights_index<total_flights;flights_index++)
	{
		dep_hours+=2;
		if(dep_hours>23){dep_hours-=24;}
		flights[flights_index].departure_time[0]=dep_hours;
		flights[flights_index].departure_time[1]=dep_minutes;
		time_of_flight(flights_index);
	}

}
void update_flight_status(int flights_index)
{
	for(int index=0;index<=passengers_index;index++)
		if(passengers[index].designated_flight==flights[flights_index].flight_code)
			for(;passengers[index].designated_flight!=flights[flights_index].flight_code;index++,passengers_index--)
				passengers[index]=passengers[index+1];
	char *temp=flights[flights_index].start_end_point[0];
	strcpy(flights[flights_index].start_end_point[0],flights[flights_index].start_end_point[1]);
	strcpy(flights[flights_index].start_end_point[1],temp);
	flights[flights_index].arrival_time[0]=flights[flights_index].arrival_time[1]=0;
	int dep_hours,dep_minutes;
	system_time_refactored(&dep_hours,&dep_minutes);
	dep_hours+=2;
	flights[flights_index].passenger_count=0;
	flights[flights_index].availibility=1;
}
void flights_availibility_status()
{
	int flights_index;
	int sys_hours,sys_minutes;
	system_time_refactored(&sys_hours,&sys_minutes);
	int sys_time=sys_hours*100+sys_minutes;
	for(flights_index=0;flights_index<total_flights;flights_index++)
	{
		if(sys_time>=flights[flights_index].departure_time[0]*100+flights[flights_index].departure_time[1])
			flights[flights_index].availibility=0;
		else if(sys_time>=flights[flights_index].arrival_time[0]*100+flights[flights_index].arrival_time[1])
		{
			update_flight_status(flights_index);
		}
	}
}
void flights_availibility()
{
	printf("\n\n==================================================\n");
	display_program_time();
	printf("Following flights are available:\n");
	// flights_availibility_status();
	for(int flights_index=0;flights_index<total_flights;flights_index++)
		if(flights[flights_index].availibility&&flights[flights_index].passenger_count<max_capacity)
		{
			printf("Flight-%c\nvacant seats: %d\n",flights[flights_index].flight_code,max_capacity-flights[flights_index].passenger_count);
			printf("departure from: %s   at time- %d:%d hrs\n",flights[flights_index].start_end_point[0],flights[flights_index].departure_time[0],flights[flights_index].departure_time[1]);
			printf("arrival at: %s   at time- %d:%d hrs\n",flights[flights_index].start_end_point[1],flights[flights_index].arrival_time[0],flights[flights_index].arrival_time[1]);
			printf("One way\n");
		}
}
int book_tickets()
{
	int flight_index;
	printf("for which flight you want to book tickets?(enter flight character code): ");
	char flight_code=character_scanner();
	for(flight_index=0;flight_index<total_flights;flight_index++)
		if(flight_code==flights[flight_index].flight_code&&max_capacity-flights[flight_index].passenger_count)
			break;
	if(flight_index==total_flights)
	{
		printf("No such flight exists! Redirecting...\n\n");
		return 0;
	}
	else
	{
		int tickets;
		LB:
		printf("how many tickets you want to book?: ");
		tickets=int_scanner();
		if(tickets>max_capacity-flights[flight_index].passenger_count)
		{
			printf("only %d seats are available!\n",max_capacity-flights[flight_index].passenger_count);
			goto LB;
		}
		for(passengers_index=0;tickets;flights[flight_index].passenger_count++,passengers_index++,tickets--)
		{
			printf("\nenter name of passenger: ");
			char *name=string_scanner();
			strcpy(passengers[passengers_index].name,name);
			printf("\nenter age of passenger: ");
			passengers[passengers_index].age=int_scanner();
			passengers[passengers_index].designated_flight=flight_code;
		}
		return 1;
	}
}
void main()
{
    srand(time(NULL));
	system_date();
	update_initial_departure_arrival_time();
	int user_choice;
	printf("Welcome to Luxury Airlines!\nWhat would you like to do today?\n\n");
	do
	{
		printf("\n---------------------\n");
		display_program_time();
		printf("Enter 1 to book tickets\nEnter 2 to check for available flights\nEnter 0 to exit\n");
		printf("Provide your choice here: ");
		user_choice=int_scanner();
		switch(user_choice)
		{
			case 1:if(book_tickets())printf("Your ticket has been booked successfully!\n");else printf("booking failed!\n");break;
			case 2:flights_availibility();
			case 0:flights_availibility_status();break;
			default :flights_availibility_status();invalid_input_handler();
		}
	}while(user_choice);
}